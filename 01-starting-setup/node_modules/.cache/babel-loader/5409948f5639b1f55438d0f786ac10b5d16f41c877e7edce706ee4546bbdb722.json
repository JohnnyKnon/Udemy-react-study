{"ast":null,"code":"var _jsxFileName = \"/Users/devjohnny/Desktop/Udemy-react-study/01-starting-setup/src/components/NewExpense/ExpenseForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './ExpenseForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExpenseForm = props => {\n  _s();\n  const {\n    onAddEvent\n  } = props;\n  const [enteredTitle, setEnteredTitle] = useState('');\n  const [enteredAmount, setEnteredAmount] = useState('');\n  const [enteredDate, setEnteredDate] = useState('');\n\n  //   const [userInput, setUserInput] = useState({\n  //     enteredTitle: '',\n  //     enteredAmount: '',\n  //     enteredDate: '',\n  //   });\n\n  /**\n   *\n   *  모든 이밴트에 대응하는 핸들러가 존재\n   * ==================================================================================================================\n   */\n  const titleChangeHandler = event => {\n    setEnteredTitle(event.target.value);\n\n    /**\n     *  객체를 사용하여 처리하는 방식은 하단의 2가지 입니다. 2가지 모두 가능은 하지만, 리액트는 상태 업데이트를 예약해두기 때문에 즉시 처리하지 않음\n     *  그렇기 때문에, 전자의 방식으로 이전 상태 의존한 작업을 할 경우 간혹 오래되었거나, 잘못된 상태 스냅샷에 의존할 경우가 이론적으로 존재함\n     *  하지만, 후자의 경우에는, 내부 함수에서 제공하는 여기서는 prevState 상태 스냅샷 매개변수를 통하여, 최신 상태 스냅샷이 되도록 보장해줌\n     *  따라서, 후자의 경우에는 전자의 경우보다 안전하게 최신 상태 스냅샷으로 작업할 수 있는 방법\n     *  이전 상태에 의존해 상태를 업데이트 할 경우에는 후자를 선택하자!\n     */\n\n    // setUserInput({ ...userInput, enteredTitle: event.target.value });\n    // setUserInput((prevState) => {\n    //   return { ...prevState, enteredTitle: event.target.value };\n    // });\n  };\n\n  const amountChangeHandler = event => {\n    // setUserInput({ ...userInput, enteredAmount: event.target.value });\n    setEnteredAmount(event.target.value);\n  };\n  const dateChangeHandler = event => {\n    // setUserInput({ ...userInput, enteredDate: event.target.value });\n    setEnteredDate(event.target.value);\n  };\n\n  // ==================================================================================================================\n\n  /**\n   *\n   *  다른 방식으로 핸들링 하는 방법 ( 모든 input 변화 감지 시킬 수 있게 )\n   * ==================================================================================================================\n   */\n\n  //   const inputChangeHandler = (identifier, value) => {\n  //     if (identifier === 'title') {\n  //       setEnteredTitle(value);\n  //     } else if (identifier === 'date') {\n  //       setEnteredDate(value);\n  //     } else {\n  //       setEnteredAmount(value);\n  //     }\n  //   };\n\n  // 위 와 같은 방식을 대응하는 방법\n  // onChange={(event) => inputChangeHandler('title', event.target.value)}\n\n  const addExpense = () => {\n    const addObj = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      date: enteredDate\n    };\n    onAddEvent(addObj);\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0.01\",\n          step: \"0.01\",\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"2019-01-01\",\n          max: \"2022-12-31\",\n          onChange: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addExpense,\n        type: \"submit\",\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(ExpenseForm, \"/TSOglz5ZV3C6oWQkp/FZ+OWqo4=\");\n_c = ExpenseForm;\nexport default ExpenseForm;\nvar _c;\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ExpenseForm","props","_s","onAddEvent","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","titleChangeHandler","event","target","value","amountChangeHandler","dateChangeHandler","addExpense","addObj","title","amount","date","children","className","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","min","step","max","onClick","_c","$RefreshReg$"],"sources":["/Users/devjohnny/Desktop/Udemy-react-study/01-starting-setup/src/components/NewExpense/ExpenseForm.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './ExpenseForm.css';\n\nconst ExpenseForm = (props) => {\n  const { onAddEvent } = props;\n  const [enteredTitle, setEnteredTitle] = useState('');\n  const [enteredAmount, setEnteredAmount] = useState('');\n  const [enteredDate, setEnteredDate] = useState('');\n\n  //   const [userInput, setUserInput] = useState({\n  //     enteredTitle: '',\n  //     enteredAmount: '',\n  //     enteredDate: '',\n  //   });\n\n  /**\n   *\n   *  모든 이밴트에 대응하는 핸들러가 존재\n   * ==================================================================================================================\n   */\n  const titleChangeHandler = (event) => {\n    setEnteredTitle(event.target.value);\n\n    /**\n     *  객체를 사용하여 처리하는 방식은 하단의 2가지 입니다. 2가지 모두 가능은 하지만, 리액트는 상태 업데이트를 예약해두기 때문에 즉시 처리하지 않음\n     *  그렇기 때문에, 전자의 방식으로 이전 상태 의존한 작업을 할 경우 간혹 오래되었거나, 잘못된 상태 스냅샷에 의존할 경우가 이론적으로 존재함\n     *  하지만, 후자의 경우에는, 내부 함수에서 제공하는 여기서는 prevState 상태 스냅샷 매개변수를 통하여, 최신 상태 스냅샷이 되도록 보장해줌\n     *  따라서, 후자의 경우에는 전자의 경우보다 안전하게 최신 상태 스냅샷으로 작업할 수 있는 방법\n     *  이전 상태에 의존해 상태를 업데이트 할 경우에는 후자를 선택하자!\n     */\n\n    // setUserInput({ ...userInput, enteredTitle: event.target.value });\n    // setUserInput((prevState) => {\n    //   return { ...prevState, enteredTitle: event.target.value };\n    // });\n  };\n\n  const amountChangeHandler = (event) => {\n    // setUserInput({ ...userInput, enteredAmount: event.target.value });\n    setEnteredAmount(event.target.value);\n  };\n\n  const dateChangeHandler = (event) => {\n    // setUserInput({ ...userInput, enteredDate: event.target.value });\n    setEnteredDate(event.target.value);\n  };\n\n  // ==================================================================================================================\n\n  /**\n   *\n   *  다른 방식으로 핸들링 하는 방법 ( 모든 input 변화 감지 시킬 수 있게 )\n   * ==================================================================================================================\n   */\n\n  //   const inputChangeHandler = (identifier, value) => {\n  //     if (identifier === 'title') {\n  //       setEnteredTitle(value);\n  //     } else if (identifier === 'date') {\n  //       setEnteredDate(value);\n  //     } else {\n  //       setEnteredAmount(value);\n  //     }\n  //   };\n\n  // 위 와 같은 방식을 대응하는 방법\n  // onChange={(event) => inputChangeHandler('title', event.target.value)}\n\n  const addExpense = () =>{\n    const addObj = {\n      title : enteredTitle,\n      amount: enteredAmount,\n      date: enteredDate,\n    }\n    \n    onAddEvent(addObj);\n  }\n  return (\n    <form>\n      <div className=\"new-expense__controls\">\n        <div className=\"new-expense__control\">\n          <label>Title</label>\n          <input type=\"text\" onChange={titleChangeHandler} />\n        </div>\n        <div className=\"new-expense__control\">\n          <label>Amount</label>\n          <input\n            type=\"number\"\n            min=\"0.01\"\n            step=\"0.01\"\n            onChange={amountChangeHandler}\n          />\n        </div>\n        <div className=\"new-expense__control\">\n          <label>Date</label>\n          <input\n            type=\"date\"\n            min=\"2019-01-01\"\n            max=\"2022-12-31\"\n            onChange={dateChangeHandler}\n          />\n        </div>\n      </div>\n      <div className=\"new-expense__actions\">\n        <button onClick={addExpense} type=\"submit\">Add Expense</button>\n      </div>\n    </form>\n  );\n};\n\nexport default ExpenseForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}