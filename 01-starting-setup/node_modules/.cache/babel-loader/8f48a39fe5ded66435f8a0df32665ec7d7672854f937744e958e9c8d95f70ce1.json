{"ast":null,"code":"var _jsxFileName = \"/Users/devjohnny/Desktop/Udemy-react-study/01-starting-setup/src/components/Expenses/Expenses.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './Expenses.css';\nimport ExpenseItem from './ExpenseItem';\nimport ExpensesFilter from './ExpensesFilter';\nimport Card from '../UI/Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Expenses = props => {\n  _s();\n  const expenses = props.data;\n  const [filteredYear, setFilteredYear] = useState('2020');\n  const filterChangeHandler = selectedYear => {\n    setFilteredYear(selectedYear);\n  };\n\n  // 파생효과를 이용한 작업 onChange를 사용하게 되면 해당 컴포넌트 전체가 브라우저에서 다시그려지기 때문에, 하단 filteredYear이 갱신된 값으로 불러와지고, 결론적으로 원하는 필터 내용 호출\n  const filteredExpenses = expenses.filter(expense => {\n    return expense.date.getFullYear().toString() === filteredYear;\n  });\n  let expensesContent = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"No expenses found.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 25\n  }, this);\n  if (filteredExpenses.length > 0) {\n    expensesContent = filteredExpenses.map((x, i) => {\n      return /*#__PURE__*/_jsxDEV(ExpenseItem, {\n        title: x.title,\n        amount: x.amount,\n        date: x.date\n      }, x.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this);\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      className: \"expenses\",\n      children: /*#__PURE__*/_jsxDEV(ExpensesFilter, {\n        selected: filteredYear,\n        onChangeFilter: filterChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(Expenses, \"d6AxVjxjRbYO2YFEia8LjUybrDc=\");\n_c = Expenses;\nexport default Expenses;\nvar _c;\n$RefreshReg$(_c, \"Expenses\");","map":{"version":3,"names":["React","useState","ExpenseItem","ExpensesFilter","Card","jsxDEV","_jsxDEV","Expenses","props","_s","expenses","data","filteredYear","setFilteredYear","filterChangeHandler","selectedYear","filteredExpenses","filter","expense","date","getFullYear","toString","expensesContent","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","x","i","title","amount","id","className","selected","onChangeFilter","_c","$RefreshReg$"],"sources":["/Users/devjohnny/Desktop/Udemy-react-study/01-starting-setup/src/components/Expenses/Expenses.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './Expenses.css';\nimport ExpenseItem from './ExpenseItem';\nimport ExpensesFilter from './ExpensesFilter';\nimport Card from '../UI/Card';\n\nconst Expenses = (props) => {\n\n  const expenses = props.data;\n\n  const [filteredYear, setFilteredYear] = useState('2020');\n\n  const filterChangeHandler = selectedYear => {\n    setFilteredYear(selectedYear);\n  }\n\n  // 파생효과를 이용한 작업 onChange를 사용하게 되면 해당 컴포넌트 전체가 브라우저에서 다시그려지기 때문에, 하단 filteredYear이 갱신된 값으로 불러와지고, 결론적으로 원하는 필터 내용 호출\n  const filteredExpenses = expenses.filter(expense => {\n    return expense.date.getFullYear().toString() === filteredYear;\n  });\n\n  let expensesContent = <p>No expenses found.</p>;\n\n  if (filteredExpenses.length > 0) {\n    expensesContent = filteredExpenses.map((x, i) => {\n      return (\n        <ExpenseItem\n          key={x.id}\n          title={x.title}\n          amount={x.amount}\n          date={x.date}\n        />\n      );\n    })\n  }\n\n  return (\n    <div>\n      <Card className=\"expenses\">\n        <ExpensesFilter selected={filteredYear} onChangeFilter={filterChangeHandler} />\n      </Card>\n    </div>\n  );\n};\n\nexport default Expenses;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,gBAAgB;AACvB,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,IAAI,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,MAAMC,QAAQ,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAE1B,MAAMC,QAAQ,GAAGF,KAAK,CAACG,IAAI;EAE3B,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,MAAM,CAAC;EAExD,MAAMa,mBAAmB,GAAGC,YAAY,IAAI;IAC1CF,eAAe,CAACE,YAAY,CAAC;EAC/B,CAAC;;EAED;EACA,MAAMC,gBAAgB,GAAGN,QAAQ,CAACO,MAAM,CAACC,OAAO,IAAI;IAClD,OAAOA,OAAO,CAACC,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,KAAKT,YAAY;EAC/D,CAAC,CAAC;EAEF,IAAIU,eAAe,gBAAGhB,OAAA;IAAAiB,QAAA,EAAG;EAAkB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;EAE/C,IAAIX,gBAAgB,CAACY,MAAM,GAAG,CAAC,EAAE;IAC/BN,eAAe,GAAGN,gBAAgB,CAACa,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MAC/C,oBACEzB,OAAA,CAACJ,WAAW;QAEV8B,KAAK,EAAEF,CAAC,CAACE,KAAM;QACfC,MAAM,EAAEH,CAAC,CAACG,MAAO;QACjBd,IAAI,EAAEW,CAAC,CAACX;MAAK,GAHRW,CAAC,CAACI,EAAE;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIV,CAAC;IAEN,CAAC,CAAC;EACJ;EAEA,oBACErB,OAAA;IAAAiB,QAAA,eACEjB,OAAA,CAACF,IAAI;MAAC+B,SAAS,EAAC,UAAU;MAAAZ,QAAA,eACxBjB,OAAA,CAACH,cAAc;QAACiC,QAAQ,EAAExB,YAAa;QAACyB,cAAc,EAAEvB;MAAoB;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3E;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV,CAAC;AAAClB,EAAA,CArCIF,QAAQ;AAAA+B,EAAA,GAAR/B,QAAQ;AAuCd,eAAeA,QAAQ;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}